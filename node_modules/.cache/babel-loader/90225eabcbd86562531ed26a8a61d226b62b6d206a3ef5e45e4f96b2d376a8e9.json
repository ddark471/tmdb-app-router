{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\satoshi_khd\\\\Desktop\\\\tmdb-app-router\\\\src\\\\pages\\\\SearchPage\\\\SearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { service } from \"../../api/service\";\nimport PostersTemplate from \"../../components/PostersTemplate/PostersTemplate\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport styles from \"../Movies/Movies.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchPage = () => {\n  _s();\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [totalResults, setTotalResults] = useState(0);\n  const navigate = useNavigate();\n  const {\n    t\n  } = useTranslation();\n  const query = searchParams.get(\"query\");\n\n  // useEffect(() => {\n  //   service(\n  //     `https://api.themoviedb.org/3/search/movie?query=${query}&language=${t(\n  //       \"api-code\"\n  //     )}&page=${searchParams.get(\"page\") ? searchParams.get(\"page\") : 1}`,\n  //     \"GET\"\n  //   ).then(({ data }) => {\n  //     setSearchResults(data.results);\n  //     setTotalResults(data.total_results);\n  //   });\n  //   setSearchParams({\n  //     query: query,\n  //     page: searchParams.get(\"page\") ? searchParams.get(\"page\") : 1,\n  //   });\n  // }, [searchParams]);\n\n  const {\n    data,\n    isError,\n    isSuccess,\n    isFetched,\n    error\n  } = useQuery({\n    queryKey: [\"SearchPage\", searchParams],\n    queryFn: async () => {\n      const {\n        data\n      } = await service(`https://api.themoviedb.org/3/search/movie?query=${query}&language=${t(\"api-code\")}&page=${searchParams.get(\"page\") ? searchParams.get(\"page\") : 1}`, \"GET\");\n      setSearchParams({\n        query: query,\n        page: searchParams.get(\"page\") ? searchParams.get(\"page\") : 1\n      });\n      return data;\n    }\n  });\n  console.log(data);\n  const handleBackPage = () => setSearchParams({\n    query: searchParams.get(\"query\"),\n    page: searchParams.get(\"page\") - 1\n  });\n  const handleNextPage = () => setSearchParams({\n    query: searchParams.get(\"query\"),\n    page: parseInt(searchParams.get(\"page\", 10)) + 1\n  });\n  useEffect(() => {\n    setSearchParams({\n      query: searchParams.get(\"query\"),\n      page: navigate(-1) || 1\n    });\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.moviesContainer,\n      children: [\" \", data.map(movies => /*#__PURE__*/_jsxDEV(PostersTemplate, {\n        postersData: movies,\n        type: \"moviePosters\"\n      }, movies.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(Pagination, {\n      handleBackPage: handleBackPage,\n      handleNextPage: handleNextPage,\n      searchResults: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(SearchPage, \"sPrWxS/zHWwHSmoXZvghDZ1+CRM=\", false, function () {\n  return [useSearchParams, useNavigate, useTranslation, useQuery];\n});\n_c = SearchPage;\nexport default SearchPage;\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","useNavigate","useQuery","useTranslation","service","PostersTemplate","Pagination","NavBar","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchPage","_s","searchResults","setSearchResults","searchParams","setSearchParams","totalResults","setTotalResults","navigate","t","query","get","data","isError","isSuccess","isFetched","error","queryKey","queryFn","page","console","log","handleBackPage","handleNextPage","parseInt","children","className","moviesContainer","map","movies","postersData","type","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/satoshi_khd/Desktop/tmdb-app-router/src/pages/SearchPage/SearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { service } from \"../../api/service\";\nimport PostersTemplate from \"../../components/PostersTemplate/PostersTemplate\";\nimport Pagination from \"../../components/Pagination/Pagination\";\nimport NavBar from \"../../components/NavBar/NavBar\";\nimport styles from \"../Movies/Movies.module.css\";\n\nconst SearchPage = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [totalResults, setTotalResults] = useState(0);\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const query = searchParams.get(\"query\");\n\n  // useEffect(() => {\n  //   service(\n  //     `https://api.themoviedb.org/3/search/movie?query=${query}&language=${t(\n  //       \"api-code\"\n  //     )}&page=${searchParams.get(\"page\") ? searchParams.get(\"page\") : 1}`,\n  //     \"GET\"\n  //   ).then(({ data }) => {\n  //     setSearchResults(data.results);\n  //     setTotalResults(data.total_results);\n  //   });\n  //   setSearchParams({\n  //     query: query,\n  //     page: searchParams.get(\"page\") ? searchParams.get(\"page\") : 1,\n  //   });\n  // }, [searchParams]);\n\n  const { data, isError, isSuccess, isFetched, error } = useQuery({\n    queryKey: [\"SearchPage\", searchParams],\n    queryFn: async () => {\n      const { data } = await service(\n        `https://api.themoviedb.org/3/search/movie?query=${query}&language=${t(\n          \"api-code\"\n        )}&page=${searchParams.get(\"page\") ? searchParams.get(\"page\") : 1}`,\n        \"GET\"\n      );\n      setSearchParams({\n        query: query,\n        page: searchParams.get(\"page\") ? searchParams.get(\"page\") : 1,\n      });\n      return data;\n    },\n  });\n\n  console.log(data);\n\n  const handleBackPage = () =>\n    setSearchParams({\n      query: searchParams.get(\"query\"),\n      page: searchParams.get(\"page\") - 1,\n    });\n\n  const handleNextPage = () =>\n    setSearchParams({\n      query: searchParams.get(\"query\"),\n      page: parseInt(searchParams.get(\"page\", 10)) + 1,\n    });\n\n  useEffect(() => {\n    setSearchParams({\n      query: searchParams.get(\"query\"),\n      page: navigate(-1) || 1,\n    });\n  }, [query]);\n\n  return (\n    <>\n      {isSuccess && (\n        <div className={styles.moviesContainer}>\n          {\" \"}\n          {data.map((movies) => (\n            <PostersTemplate\n              postersData={movies}\n              type={\"moviePosters\"}\n              key={movies.id}\n            />\n          ))}\n        </div>\n      )}\n      {isSuccess && (\n        <Pagination\n          handleBackPage={handleBackPage}\n          handleNextPage={handleNextPage}\n          searchResults={data}\n        />\n      )}\n    </>\n  );\n};\nexport default SearchPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}